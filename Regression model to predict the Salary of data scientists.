{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b2b71844-37e7-4639-9f88-b61477e33192",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\kowsa\\venu\\Lib\\site-packages\\keras\\src\\layers\\core\\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mae: 173239.57945127066\n",
      "mse: 317223652812.2919\n",
      "rmse: 563226.1116215155\n",
      "r2: -0.012360570993973141\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "df=pd.read_csv(r\"C:\\Users\\kowsa\\Downloads\\ds_salaries (ML).csv\")\n",
    "df.head()\n",
    "df.isnull().sum()\n",
    "df.drop_duplicates(inplace=True)\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "categorical_cols = ['experience_level', 'employment_type', 'job_title', 'salary_currency',\n",
    "       'employee_residence', 'company_location', 'company_size']\n",
    "le=LabelEncoder()\n",
    "for col in categorical_cols:\n",
    "    df[col] = le.fit_transform(df[col])\n",
    "x = df.drop(['salary'],axis=1)\n",
    "y = df['salary']\n",
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "model = Sequential()\n",
    "model.add(Dense(64, activation='relu', input_shape=(x_train.shape[1],)))\n",
    "model.add(Dense(32, activation='relu'))\n",
    "model.compile(optimizer='adam', loss='mean_squared_error')\n",
    "model.fit(x_train, y_train, epochs=50, batch_size=32, verbose=0)\n",
    "from sklearn.linear_model import LinearRegression\n",
    "model=LinearRegression()\n",
    "model.fit(x,y)\n",
    "y_pred=model.predict(x_test)\n",
    "from sklearn import metrics\n",
    "print('mae:',metrics.mean_absolute_error(y_test,y_pred))\n",
    "print('mse:',metrics.mean_squared_error(y_test,y_pred))\n",
    "print('rmse:',np.sqrt(metrics.mean_squared_error(y_test,y_pred)))\n",
    "print('r2:',metrics.r2_score(y_test,y_pred))\n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4ee122f-fb92-4aab-adf1-71e5d7757639",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
